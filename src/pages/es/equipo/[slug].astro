---
import CloudinaryImage from "@components/ui/cloudinaryImage.astro";
import Container from "@components/container.astro";
import Layout from "@layouts/Layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection, render, type CollectionEntry } from "astro:content";

export const getStaticPaths: GetStaticPaths = async () => {
  const teamEntries = await getCollection("equipo");
  return teamEntries.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
};
interface Props {
  entry: CollectionEntry<"equipo">;
}
const { entry } = Astro.props;
const { Content } = await render(entry);
---

<Layout
  title={entry.data.title}
  description={entry.data.resume}
  image={entry.data.avatar.src}
>
  <Container>
    <div class="mx-auto max-w-3xl mt-14">
      <header>
        <span
          class="text-blue-400 uppercase tracking-wider text-sm font-medium"
          transition:name=`${entry.id} category`
        >
          {entry.data.category}
        </span>
        <h1
          class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight"
          transition:name=`${entry.data.alias} alias`
        >
          {entry.data.title}
        </h1>
        <div
          class="flex gap-2 mt-3 items-center flex-wrap md:flex-nowrap"
          transition:name=`${entry.id} meta`
        >
          <span class="text-gray-400">{entry.data.name}</span>
          <span class="text-gray-400">•</span>
          <time
            class="text-gray-400"
            datetime={entry.data.publishDate.toISOString()}
          >
            {entry.data.publishDate.toDateString()}
          </time>
          <span class="text-gray-400 hidden md:block">•</span>
        </div>
        <figure class="mx-auto max-w-3xl aspect-square w-full">
          <CloudinaryImage
            src={`team/${entry.data.avatar.src}`}
            alt={entry.data.avatar.alt}
            aspectRatio="1"
            loading={"eager"}
            decoding={"sync"}
            transition:name=`${entry.id} img`
            class="w-full rounded-md object-cover object-center bg-white"
          />
          <figcaption class="text-gray-400 text-xs text-center w-100 pt-2">
            {entry.data.avatar.alt}
          </figcaption>
        </figure>
        <details>
          <summary>Summary</summary>
          <p class="text-sm text-gray-400" transition:name=`${entry.id} resume`>
            {entry.data.resume}
          </p>
        </details>
      </header>
    </div>
    <div class="mx-auto prose prose-lg mt-6 max-w-3xl">
      <Content />
    </div>
    <blockquote class="md:hidden text-xs mx-auto prose prose-lg mt-6 max-w-3xl">
      I`m a developer that loves to share knowledge
    </blockquote>
    <button
      class="md:hidden bg-100 px-5 py-3 rounded-md hover:bg-gray-200 transition"
      id="share"
      data-description={entry.data.title}>share</button
    >
    <script>
      const shareData = {
        text: "",
        title: "",
        url: window.location.href,
      };
      const btn = document.getElementById("share");
      // Share must be triggered by "user activation"
      btn!.addEventListener("click", async () => {
        shareData.text = btn!.dataset.description ?? "";
        shareData.title = btn!.dataset.description ?? "";
        await navigator.share(shareData);
      });
    </script>
    <div class="text-center mt-8">
      <a
        href="#"
        id="back"
        class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition"
      >
        ← Back
      </a>
    </div>
    <script>
      document.getElementById("back")!.addEventListener("click", (e) => {
        e.preventDefault();
        window.history.back();
      });
    </script>
  </Container>
</Layout>
