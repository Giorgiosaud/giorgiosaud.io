---
import { getCollection, type CollectionEntry} from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import type { GetStaticPaths, Page } from 'astro';
import { getEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import NoteHeader from "@components/noteHeader.astro";
import { auto } from "@cloudinary/url-gen/actions/resize";
import { Cloudinary } from "@cloudinary/url-gen/index";
import { autoGravity } from "@cloudinary/url-gen/qualifiers/gravity";
export const getStaticPaths:GetStaticPaths=async ()=> {
  const notebookEntries = await getCollection("notas");
  return notebookEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
interface Props {
  entry: CollectionEntry<"notes">;
}
// Get the entry directly from the prop on render
const { entry } = Astro.props;

const { Content } = await entry.render();
const cld = new Cloudinary({
  cloud: {
    cloudName: "giorgiosaud",
    apiKey: import.meta.env.CLOUDINARY_API_KEY,
    apiSecret: import.meta.env.CLOUDINARY_API_SECRET,
  },
  url: {
    secure: true, // force https, set to false to force http,
    // secureDistribution: 'www.giorgiosaud.io',
  },
});

let cldSrc = cld.image(entry.data.image.src).format("auto").quality("auto");
  cldSrc = cldSrc.resize(auto().gravity(autoGravity()).width(430));
  cldSrc = cldSrc.resize(auto().gravity(autoGravity()).height(430));
  cldSrc = cldSrc.resize(
    auto().gravity(autoGravity()).aspectRatio(1),
  );
const article={
  title: entry.data.title,
  publishedTime: entry.data.publishDate,
  modifiedTime: entry.data.publishDate,
  authors: ["Giorgiosaud"],
  section: entry.data.category,
  tags: entry.data.tags,
  imageSrc: cldSrc.toURL(),

}
const author=await getEntry("equipo",entry.data.author.slug);
---

<Layout title={entry.data.title} description={entry.data.resume} image={entry.data.image.src} article={article}>
  <Container>
    <div class="mx-auto max-w-3xl mt-14">
      <NoteHeader
        basePath="es/cuaderno"
        slug={entry.slug}
        resume={entry.data.resume}
        category={entry.data.category}
        title={entry.data.title}
        publishDate={entry.data.publishDate}
        imageSrc={entry.data.image.src}
        imageAlt={entry.data.image.alt}
        authorAlias={author.data.alias}
        authorLink=`/equipo/${entry.data.author.slug}`
        tags={entry.data.tags} 
        hideTags={false}
       />
</div>
<div class="mx-auto prose prose-lg mt-6 max-w-3xl">
  <Content />
</div>
<blockquote class="md:hidden text-xs mx-auto prose prose-lg mt-6 max-w-3xl">
  I`m a developer that loves to share knowledge
</blockquote>
<div class="mx-auto prose prose-lg mt-6 max-w-3xl">
  <button class="relative my-4 bg-300 border-solid border-2 px-4 py-4 text-center flex align-middle justify-center  rounded-md hover:bg-gray-200 transition text-gray-500 " id="share" data-resume={entry.data.resume} data-title={entry.data.title} data-tags={entry.data.tags} data-selfhealing={entry.data.selfHealing}>

    <Icon name="bx:share-alt" />
  <span class="text-sm w-[200%] absolute left-[120%] opacity-0 transition-opacity" id="copied-text">Url Copied!</span>

  </button>
</div>
<script>
  
</script>
<div class="text-center mt-8">
  <a
  href="#"
  id="back"
  class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition">
  ‚Üê Back 
</a>
</div>
<script>
  document.getElementById("back")!.addEventListener("click", (e) => {
    e.preventDefault();
    window.history.back();
  });
</script>
</Container>
</Layout>
<script>
  const btn = document.getElementById("share");
  const txt = document.getElementById("copied-text");
  const shareData = {
    text:btn?.dataset.resume,
    title:btn?.dataset.title,
    url: window.location.href+"-"+btn?.dataset.selfhealing,
  };
  
  // Share must be triggered by "user activation"
  btn!.addEventListener("click", async () => {
    try{
      await navigator.share(shareData);
    } catch (err) {
      //share in linkedin
      navigator.clipboard.writeText(shareData.url);
      txt?.classList.remove("opacity-0");
      setTimeout(() => txt?.classList.add("opacity-0"), 700);

    }
  });
  document.querySelectorAll("pre").forEach(codeBlock => {
    const wrapper = document.createElement("div");
    wrapper.style.position = "relative";
    
    const copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.textContent = "Copy Code";
    codeBlock.setAttribute("tabindex", "0");
    wrapper.appendChild(copyButton);
    codeBlock.before(wrapper);
    wrapper.appendChild(codeBlock);
    
    copyButton.addEventListener("click", async () => {
      await navigator.clipboard.writeText(codeBlock.querySelector("code").innerText);
      copyButton.textContent = "Code Copied";
      setTimeout(() => copyButton.textContent = "Copy Code", 700);
    });
  });
</script> 
<style is:inline>
  .copy-code{
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 0.8rem;
    cursor: pointer;
    background: #60a5fa;
    padding: 0 .5rem;
    color:rgb(7 1 62);
  }
  .copy-code:hover{
    background: #3b82f6;
  }
</style>


