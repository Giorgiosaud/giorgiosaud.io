---
import { Picture } from 'astro:assets'
import { getCollection, render } from 'astro:content'
import NoteTemplate from '@templates/Note.astro'
import '@global-styles/md.css'
export async function getStaticPaths() {
  const pages = await getCollection('notes')
  const pagesTranslated = await getCollection('notas')
  return pages.map(page => {
    const pathToTranslateNote =
    pagesTranslated.find(
    translatedPage =>
    translatedPage.data.selfHealing &&
    translatedPage.data.selfHealing === page.data.selfHealing,
    )?.id || ''
    return {
      params: {
        note: page.id,
      },
      props: {
        page,
        pathToTranslateNote,
      },
    }
  })
}

const { page, pathToTranslateNote } = Astro.props
const { Content } = await render(page)
const { draft, title, publishDate, cover, coverAlt, description, selfHealing } =
page.data
const imageName = `${page.id}-latest`
---
<NoteTemplate
description={description}
draft={draft}
title={title}
image={cover}
publishedAt={publishDate}
pathToTranslateNote={pathToTranslateNote}
>
<figure>
  {cover && coverAlt && <Picture src={cover} alt={coverAlt} width={500}/>}
  <figcaption>{coverAlt}</figcaption>
</figure>
<div id="summary"></div>
<div id="content">
<h1>{title}</h1>
<Content/>
</div>
<section class="share">
  <p>Share this note:</p>
  <p id="notification">Link copied to clipboard!</p>
  <button id="share" class="button button-primary" popovertarget="#share-notification">Share</button>
</section>
</NoteTemplate>
<script type="module">
  import { marked } from "https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js";
  if ('Summarizer' in self) {
    const summaryElement = document.getElementById('summary');
    summaryElement.classList.add('can-summarize');
    
    async function summarizeContent(){
    const options = {
      sharedContext: 'This is a FrontEnd developers article',
      type: 'teaser',
      format: 'markdown',
      length: 'long',
      monitor(m) {
        m.addEventListener('downloadprogress', (e) => {
          console.log(`Downloaded ${e.loaded * 100}%`);
        });
      }
    };
      const summarizer = await Summarizer.create(options);
      console.log({summarizer})
      const text= document.getElementById('content').innerText;
      summaryElement.innerText = 'Generating summary...';
      const summary = await summarizer.summarizeStreaming(text);
      summaryElement.innerText = '';
      for await (const chunk of summary.values()) {
        summaryElement.innerText += chunk;
      }
      console.log('Raw summary:', summaryElement.innerText);
      summaryElement.innerHTML =
      marked.parse(summaryElement.innerText);
      console.log('Summary generation completed.');
      
      
  };
  summarizeContent();
  };
</script>
<script define:vars={{selfHealing}}>
  
  // The Summarizer API is supported.
notification = document.getElementById('notification');

const shareButton = document.getElementById('share');
const urlToShare = `${window.location.href}-${selfHealing}`;
const copyLink = async (link)=>{
  if (navigator.clipboard) {
    try {
      await navigator.clipboard.writeText(link);
      notification.style.display = 'block';
      setTimeout(() => {
        notification.style.display = 'none';
      }, 2000);
      console.log('Link copied to clipboard');
    } catch (err) {
      console.error('Failed to copy link: ', err);
      throw err
    }
  }
  else{
    console.log('Clipboard API not supported');
    throw new Error('Clipboard API not supported');
  }
}
const shareViaShareApi=async ({title, text, url})=>{
  if (navigator.share) {
    try{
      await navigator.share({title, text, url});
      console.log('Successful share');
    } catch (error) {
      console.error('Error sharing:', error);
      throw error
    }
  }
  else{
    console.log('Share API not supported');
    throw new Error('Share API not supported');
  }
}

const shareContent = async () => {
  const shareData = {
    title: document.querySelector('h1').textContent,
    text: document.querySelector('meta[name="description"]').content,
    url: urlToShare,
  };
  try{
    await shareViaShareApi(shareData);
  } catch (error) {
    try {
      // Fallback to copying the link if Share API fails
      await copyLink(shareData.url);
    } catch (error) {
      console.error('Error copying link:', error);
    }
  }
};
shareButton.addEventListener('click', shareContent);

</script>
<style define:vars={{imageName}}>
  #share{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    margin-top: 1rem;
    color: light-dark(var(--color-light), var(--color-dark));
    anchor-name: --share-button;
  }
  #notification{
    display:none;
    position: fixed;
    right: 10px;
    background-color: var(--color-main);
    color: white;
    padding: 10px;
    border-radius: 5px;
    z-index: 1000;
    position-anchor: --share-button;
    bottom: calc(anchor(top) + 10px);
  }
  figure{
    text-align: center;
    padding-top: 1lh;
    img{
      margin: auto;
      border-radius: 10px;
      view-transition-name: var(--imageName);
    }
  }
  #content,#summary{
    max-width: 80ch;
    margin: auto;
    padding: 1rem;
    font-size: clamp(.8rem, 2vw, 1.125rem);
    line-height: 1.6;
  }
  #summary{
    max-width: 60ch;
    background-color: light-dark(var(--color-summary-light), var(--color-summary-dark));
    border-left: 4px solid var(--color-accent);
    margin-bottom: 2rem;
    font-style: italic;
  }
  /** make this border like gemini colors moving around as gradient  */
  #summary.can-summarize{
    margin-top: 2rem;
    width: 60ch;  
    border-left: 4px solid var(--color-accent);
    animation: gemini-border 1s infinite ease-in cubic-bezier(0.1, -0.6, 0.2, 0);
  }
  #summary.can-summarize::before{
    content: 'ðŸ¤– This summary was generated with AI';
    display: block;
    font-size: 0.875rem;
    color: light-dark(var(--color-accent-dark), var(--color-accent-light));
    margin-bottom: 0.5rem;
  }
  .can-summarize {
  position: relative;
  padding: 2rem;
  border-radius: 1rem;
  z-index: 0;
  overflow: hidden;
}
.can-summarize:after{
  background: var(--color-dark);
    content: '';
    position: absolute;
    inset: 0;
    box-sizing: border-box;
    border: transparent 41px solid;
    z-index: -1;
    margin: 5px;
    border-radius: 15px;
}
.can-summarize::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: inherit;
  padding: 4px;
  background: conic-gradient(
    from 0deg,
    #ff00cc,
    #3333ff,
    #00ffcc,
    #ffcc00,
    #ff00cc
  );
  z-index: -1;
  height: 100%;
  width: 250%;
  animation: spin 15s linear infinite;
}

.can-summarize > * {
  position: relative;
  z-index: 1;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
  
</style>