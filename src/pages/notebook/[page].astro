---
import { type CollectionEntry, getCollection } from 'astro:content'
import Note from '@components/Note.astro'
import Base from '@templates/Base.astro'
import type { GetStaticPaths, Page } from 'astro'
export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const publishedNotesEntries = await getCollection('notes', ({ data }) => {
    //filter draft props true and published in the future
    return !data.draft && data.publishDate < new Date()
  })
  //sort entries
  publishedNotesEntries.sort(
    (a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf(),
  )

  return paginate(publishedNotesEntries, {
    pageSize: 6,
  })
}
interface Props {
  page: Page<CollectionEntry<'notes'>>
}
const { page } = Astro.props
---
<Base title='Archive Page' pathToTranslate="notebook">
<h1>Archive Notes </h1>
<p>page {page.currentPage} of {page.lastPage}</p>

<ul class="page-list">
  {page.data.map(note=>{
    return <li>
      <Note note={note} />
    </li>
  })}
</ul>
<footer class="content-grid">
  <div class="prev-next">
    {page.currentPage > 1 && (
      <a href={page.url.prev} rel="prev">
        ← Previous Page
      </a>
    )}
    {page.currentPage < page.lastPage && (
      <a href={page.url.next} rel="next">
        Next Page →
      </a>
    )}
  </div>
</footer>
</Base>
<style>
  footer{
    padding-block: 1lh;
  }
  .prev-next{
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    font-size: var(--font-size, clamp(.9rem, .6cqw, 1rem));
  }
  a{
    color: var(--color-primary);
    text-decoration: none;
    &:hover{
      text-decoration: underline;
    }
  }
  .page-list{
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
  }
  p{
    padding-block: 1lh;
  }
</style>