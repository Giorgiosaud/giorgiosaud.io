import { a as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_ICIjUNoW.mjs';

const html = "<p>in this blog post, I will try to explain the pattern in a simplified way the Singleton Design Pattern, its main purpose is to reconstruct the instantiation of a class to a singular instance, I need to clarify that the use case is very difficult to find but if you think about it in a deeper way I found some interesting uses.</p>\n<p>The more known use case is to use a class to define the configuration of an application, to make use of this pattern in this use case we need to define a Class with the definitions and a configuration that can instantiate the class only if this instance does not exist like this</p>\n<pre class=\"astro-code vitesse-dark\" style=\"background-color:#121212;color:#dbd7caee; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#CB7676\">class</span><span style=\"color:#5DA994\"> AppConfig</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  constructor</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C99076\">    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">apiEndpoint</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D77\"> \"</span><span style=\"color:#C98A7D\">https://api.example.com</span><span style=\"color:#C98A7D77\">\"</span><span style=\"color:#666666\">;</span></span>\n<span class=\"line\"><span style=\"color:#758575DD\">    // Other configuration options</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"color:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#CB7676\">const</span><span style=\"color:#BD976A\"> AppConfiguration</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  let</span><span style=\"color:#BD976A\"> instance</span><span style=\"color:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  function</span><span style=\"color:#80A665\"> createInstance</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#80A665\"> AppConfig</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#4D9375\">  return</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#80A665\">    getInstance</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">      if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">instance</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BD976A\">        instance</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createInstance</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"><span style=\"color:#666666\">      }</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">      return</span><span style=\"color:#BD976A\"> instance</span><span style=\"color:#666666\">;</span></span>\n<span class=\"line\"><span style=\"color:#666666\">    },</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"color:#666666\">})();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#CB7676\">const</span><span style=\"color:#BD976A\"> config</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> AppConfiguration</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getInstance</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This use case can be some const defined in a simplified way centralizing them or defining them in the env vars of the deployment process that is because is typically known as an antipattern and not a real pattern.</p>\n<p>There are 2 ways very handful to use it, one is to use this pattern to govern the state of an application in a simplified way like a JS vanilla application there is an example of this use case</p>\n<pre class=\"astro-code vitesse-dark\" style=\"background-color:#121212;color:#dbd7caee; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#CB7676\">class</span><span style=\"color:#5DA994\"> GlobalState</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  constructor</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C99076\">    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">data</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#80A665\">  setData</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> value</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C99076\">    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">data</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">]</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> value</span><span style=\"color:#666666\">;</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#80A665\">  getData</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">data</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">];</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"color:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#CB7676\">const</span><span style=\"color:#BD976A\"> AppState</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  let</span><span style=\"color:#BD976A\"> instance</span><span style=\"color:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  function</span><span style=\"color:#80A665\"> createInstance</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#80A665\"> GlobalState</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#4D9375\">  return</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#80A665\">    getInstance</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">      if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">instance</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BD976A\">        instance</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createInstance</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"><span style=\"color:#666666\">      }</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">      return</span><span style=\"color:#BD976A\"> instance</span><span style=\"color:#666666\">;</span></span>\n<span class=\"line\"><span style=\"color:#666666\">    },</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"color:#666666\">})();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#758575DD\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#CB7676\">const</span><span style=\"color:#BD976A\"> appState</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> AppState</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getInstance</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"><span style=\"color:#758575DD\">// Set Data</span></span>\n<span class=\"line\"><span style=\"color:#BD976A\">appState</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">setData</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D77\">\"</span><span style=\"color:#C98A7D\">user</span><span style=\"color:#C98A7D77\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span><span style=\"color:#B8A965\"> id</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D77\"> \"</span><span style=\"color:#C98A7D\">John Doe</span><span style=\"color:#C98A7D77\">\"</span><span style=\"color:#666666\"> });</span></span>\n<span class=\"line\"><span style=\"color:#758575DD\">// Get Data</span></span>\n<span class=\"line\"><span style=\"color:#BD976A\">console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">appState</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getData</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D77\">\"</span><span style=\"color:#C98A7D\">user</span><span style=\"color:#C98A7D77\">\"</span><span style=\"color:#666666\">));</span></span>\n<span class=\"line\"></span></code></pre>\n<p>With this use case, we can resolve a simple state management centralized</p>\n<p>The other common use case is to use as a Bus or a PubSub system to communicate 2 elements of different scopes</p>\n<pre class=\"astro-code vitesse-dark\" style=\"background-color:#121212;color:#dbd7caee; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#CB7676\">class</span><span style=\"color:#5DA994\"> EventBus</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  constructor</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C99076\">    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">listeners</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#80A665\">  subscribe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> callback</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">listeners</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">])</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C99076\">      this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">listeners</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">]</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> [];</span></span>\n<span class=\"line\"><span style=\"color:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"color:#C99076\">    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">listeners</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">].</span><span style=\"color:#80A665\">push</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">callback</span><span style=\"color:#666666\">);</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#80A665\">  publish</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> data</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">listeners</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">])</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C99076\">      this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">listeners</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">].</span><span style=\"color:#80A665\">forEach</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">callback</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#80A665\"> callback</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">data</span><span style=\"color:#666666\">));</span></span>\n<span class=\"line\"><span style=\"color:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"><span style=\"color:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#CB7676\">const</span><span style=\"color:#BD976A\"> EventManager</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  let</span><span style=\"color:#BD976A\"> instance</span><span style=\"color:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#CB7676\">  function</span><span style=\"color:#80A665\"> createInstance</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#80A665\"> EventBus</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#4D9375\">  return</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#80A665\">    getInstance</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">      if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">instance</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BD976A\">        instance</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createInstance</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"><span style=\"color:#666666\">      }</span></span>\n<span class=\"line\"><span style=\"color:#4D9375\">      return</span><span style=\"color:#BD976A\"> instance</span><span style=\"color:#666666\">;</span></span>\n<span class=\"line\"><span style=\"color:#666666\">    },</span></span>\n<span class=\"line\"><span style=\"color:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"color:#666666\">})();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#758575DD\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#CB7676\">const</span><span style=\"color:#BD976A\"> eventBus</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> EventManager</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getInstance</span><span style=\"color:#666666\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD976A\">eventBus</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D77\">\"</span><span style=\"color:#C98A7D\">userLoggedIn</span><span style=\"color:#C98A7D77\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">user</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BD976A\">  console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D77\">`</span><span style=\"color:#4D9375\">${</span><span style=\"color:#C98A7D\">user</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">name</span><span style=\"color:#4D9375\">}</span><span style=\"color:#C98A7D\"> logged in</span><span style=\"color:#C98A7D77\">`</span><span style=\"color:#666666\">);</span></span>\n<span class=\"line\"><span style=\"color:#666666\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>There are some simple examples of this implementation of the more complex to-understand design pattern the Singleton Pattern.</p>\n</blockquote>";

				const frontmatter = {"draft":false,"selfHealing":"000005","title":"Simplified Explanation of the Singleton Design Pattern","resume":"The primary purpose of this pattern is to restrict the instantiation of a class to a single instance. Although its use cases can be rare, Jorge highlights some practical applications.","image":{"src":"singleton_hbupze","alt":"Recicle Singleton image"},"publishDate":"2023-11-14 11:39","category":"development","author":"jorge-saud","tags":["design-patterns","development"]};
				const file = "/Users/giorgiosaud/Projects/personal/giorgiosaud.io/src/content/notes/simplified-explanation-of-the-singleton-design-pattern.md";
				const url = undefined;
				function rawContent() {
					return "\nin this blog post, I will try to explain the pattern in a simplified way the Singleton Design Pattern, its main purpose is to reconstruct the instantiation of a class to a singular instance, I need to clarify that the use case is very difficult to find but if you think about it in a deeper way I found some interesting uses.\n\nThe more known use case is to use a class to define the configuration of an application, to make use of this pattern in this use case we need to define a Class with the definitions and a configuration that can instantiate the class only if this instance does not exist like this\n\n```js\nclass AppConfig {\n  constructor() {\n    this.apiEndpoint = \"https://api.example.com\";\n    // Other configuration options\n  }\n}\n\nconst AppConfiguration = (() => {\n  let instance;\n\n  function createInstance() {\n    return new AppConfig();\n  }\n\n  return {\n    getInstance: () => {\n      if (!instance) {\n        instance = createInstance();\n      }\n      return instance;\n    },\n  };\n})();\n\nconst config = AppConfiguration.getInstance();\n```\n\nThis use case can be some const defined in a simplified way centralizing them or defining them in the env vars of the deployment process that is because is typically known as an antipattern and not a real pattern.\n\nThere are 2 ways very handful to use it, one is to use this pattern to govern the state of an application in a simplified way like a JS vanilla application there is an example of this use case\n\n```js\nclass GlobalState {\n  constructor() {\n    this.data = {};\n  }\n\n  setData(key, value) {\n    this.data[key] = value;\n  }\n\n  getData(key) {\n    return this.data[key];\n  }\n}\n\nconst AppState = (() => {\n  let instance;\n\n  function createInstance() {\n    return new GlobalState();\n  }\n\n  return {\n    getInstance: () => {\n      if (!instance) {\n        instance = createInstance();\n      }\n      return instance;\n    },\n  };\n})();\n\n// Usage\nconst appState = AppState.getInstance();\n// Set Data\nappState.setData(\"user\", { id: 1, name: \"John Doe\" });\n// Get Data\nconsole.log(appState.getData(\"user\"));\n```\n\nWith this use case, we can resolve a simple state management centralized\n\nThe other common use case is to use as a Bus or a PubSub system to communicate 2 elements of different scopes\n\n```js\nclass EventBus {\n  constructor() {\n    this.listeners = {};\n  }\n\n  subscribe(event, callback) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(callback);\n  }\n\n  publish(event, data) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach((callback) => callback(data));\n    }\n  }\n}\n\nconst EventManager = (() => {\n  let instance;\n\n  function createInstance() {\n    return new EventBus();\n  }\n\n  return {\n    getInstance: () => {\n      if (!instance) {\n        instance = createInstance();\n      }\n      return instance;\n    },\n  };\n})();\n\n// Usage\nconst eventBus = EventManager.getInstance();\neventBus.subscribe(\"userLoggedIn\", (user) => {\n  console.log(`${user.name} logged in`);\n});\n```\n\n> There are some simple examples of this implementation of the more complex to-understand design pattern the Singleton Pattern.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
